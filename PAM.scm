(define (read-distance-matrix-from-file file-path)
  (define distance-matrix '())
  (with-input-from-file file-path
    (lambda ()
      (let loop ((line (read-line)))
        (unless (eof-object? line)
          (let ((row (map string->number (string-split line ","))))
            (set! distance-matrix (cons row distance-matrix)))
          (loop (read-line))))))

  (apply vector (reverse distance-matrix)))

(define (assign-clusters distance-matrix medoids)
  (define n (vector-length distance-matrix))
  (let ((cluster-indices (map (lambda (column)
                                (argmin column))
                              (transpose (map (lambda (medoid)
                                                (vector-ref distance-matrix medoid))
                                              medoids)))))
    (define clusters (make-list (length medoids)))
    (let loop ((indices cluster-indices) (clusters clusters))
      (cond ((null? indices) clusters)
            (else (let ((cluster-index (car indices)))
                    (let ((cluster (car clusters)))
                      (set-car! clusters (cons (filter (lambda (point)
                                                        (= cluster-index (argmin (vector-ref distance-matrix point) medoids)))
                                                       (range n))
                                               cluster)))
                    (loop (cdr indices) (cdr clusters))))))))

(define (calculate-total-cost distance-matrix clusters medoids)
  (define medoid-indices (apply vector (map (lambda (cluster i) (make-vector (length cluster) (vector-ref medoids i)))
                                            clusters (range (length clusters)))))

  (apply + (map (lambda (row col)
                  (vector-ref (vector-ref distance-matrix row) col))
                (range (vector-length medoid-indices))
                medoid-indices)))

(define (calculate-silhouette distance-matrix clusters)
  (define silhouette-scores '())
  (let loop ((clusters clusters))
    (cond ((null? clusters) '())
          (else (let ((cluster (car clusters)))
                  (let ((cluster-distances (vector-sort distance-matrix cluster)))
                    (let ((a (map (lambda (i) (/ (apply + (vector-skip cluster-distances i)) (- (length cluster) 1)))
                                  cluster)))
                      (let ((b (map (lambda (i)
                                       (apply min
                                              (map (lambda (j)
                                                     (vector-ref (vector-ref distance-matrix j) cluster))
                                                   (remove i cluster)))))
                                cluster))
                        (vector-append (map (lambda (a b) (/ (- b a) (max a b)))
                                            a b)
                                       (loop (cdr clusters))))))))))

(define (pam distance-matrix k)
  (define n (vector-length distance-matrix))
  (let ((medoids (vector->list (random-sample (list->vector (range n)) k)))
        (clusters (assign-clusters distance-matrix (list->vector (reverse medoids))))
        (total-cost (calculate-total-cost distance-matrix (assign-clusters distance-matrix (list->vector (reverse medoids)))
                                                                         (list->vector (reverse medoids)))))

    (let loop ((updated #t)
               (clusters clusters))
      (cond ((not updated) (values clusters (list->vector (reverse medoids))
                                    (calculate-silhouette distance-matrix clusters)))
            (else (let ((new-medoids (list->vector (map (lambda (i non-medoid)
                                                            (if (= i non-medoid)
                                                                non-medoid
                                                                (vector-ref medoids i)))
                                                          (range k)
                                                          (filter (lambda (point) (not (vector-member? point medoids)))
                                                                  (range n))))))
                    (let ((new-total-cost (calculate-total-cost distance-matrix
                                                                     (assign-clusters distance-matrix (list->vector (reverse new-medoids)))
                                                                     (list->vector (reverse new-medoids)))))
                      (if (< new-total-cost total-cost)
                          (loop #t (assign-clusters distance-matrix (list->vector (reverse new-medoids))))
                          (values clusters (list->vector (reverse medoids))
                                  (calculate-silhouette distance-matrix clusters))))))))))

(define file-path "dist_matrix(10000x10000).txt")
(define distance-matrix (read-distance-matrix-from-file file-path))
(display "Start PAM algorithm\n")
(define k-values (range 2 5))
(define max-avg-silhouette -inf)
(define best-k #f)
(define best-clusters #f)
(define best-medoids #f)

(let loop ((k-value k-values))
  (cond ((null? k-value)
         (display best-k))
        (else (let ((k (car k-value)))
                (let-values (((clusters medoids silhouette) (pam distance-matrix k)))
                  (if (> silhouette max-avg-silhouette)
                      (begin (set! max-avg-silhouette silhouette)
                             (set! best-k k)
                             (set! best-clusters clusters)
                             (set! best-medoids medoids))))
                  (loop (cdr k-value)))))))